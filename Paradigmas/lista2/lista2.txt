Paradigmas da programação, lista2
Aluno : Yean Jy Chen

1)
int fatorial(int n)
{
  int result = 1;

  if (n < 2)
    return result;

  while (n > 0)
  {
    result *= n;
    n--;
  }

  return result;
}

2)
int rfatorial(int n)
{
  if (n < 2)
    return 1;
  return n*rfatorial(n-1);
}

3)
int loopfibonacci(int n)
{
  int f = 1;
  int f1 = 1;
  int result = 0;

  if (n == 1 || n == 2)
    return f;

  for(int i = 3; i <= n; i++)
  {
    result = f + f1; 
    f = f1;
    f1 = result;
  }

  return result; 
}

4)
int fibonacci(int n)
{
  if (n == 0 || n == 1)
    return n;
  return fibonacci(n-1) + fibonacci(n-2);
}

5)
int isPrime(int n)
{
  if (n <= 1)
    return 0;

  for(int i = 2; i <= n/2; i++)
  {
    if (n % i == 0)
      return 0;
  }
  return 1;
}
void drawPrimes(int arr[], int size)
{
  srand(time(0));
  int count = 0;

  while(count < size)
  {
    int r = rand()%101;
    if(isPrime(r))
    {
      arr[count] = r;
      count++;
    }
  }

  for (int i = 0; i < size; i++)
    printf("%d\n", arr[i]);
}

6)
int isFriendNumber(int n, int m)
{
  int sn = 1;
  int sm = 1;

  for (int i = 2; i < n; i++)
  {
    if(n%i==0)
      sn += i;
  }
  for (int i = 2; i < m; i++)
  {
      if(m%i==0)
        sm += i;
  }

  return (sn == m) && (sm == n);
}

7)
int isPerfectNumber(int n)
{
  int sn = 1;

  for (int i = 2; i < n; i++)
    if (n%i == 0)
      sn += i;

  return n == sn;
}

8)
int mult(int n, int m)
{
  if (m > 0)
    return n + mult(n, m-1); 

  return m;
}

9)
int quantidade(int n)
{
  if (n>=10)
    return 1 + quantidade(n/10);

  return 1;
}

10)
int pertence(int arr[], int size, int n)
{
  for (int i = 0; i < size; i++)
  {
    if(arr[i] == n)
      return 1;
  }
  return 0; 
}

11)
int isPrime(int n)
{
  if (n <= 1)
    return 0;

  for(int i = 2; i <= n/2; i++)
  {
    if (n % i == 0)
      return 0;
  }
  return 1;
}
void drawDiferentPrimes(int arr[], int size)
{
  srand(time(0)); 
  int count = 0;

outerloop:
  while (count < size)
  {
    int r = rand()%101;
    if (isPrime(r))
    { 
      for(int i = 0; i < count; i++)
      {
        if (r == arr[i])
          goto outerloop;
      }

      arr[count] = r;
      count++;
    }
  }

  for (int i = 0; i < size; i++)
    printf("%d\n", arr[i]);

}

12)
int isValidCPF(const char cpf[])
{
  if (strlen(cpf) != 11 || cpf == "11111111111" || cpf == "00000000000")
    return 0;

  int digitoverificador1 = 0;
  for(int i = 0; i < 9; i++)
  {
    digitoverificador1 += (cpf[i] - '0')*(i+1);
  }
  digitoverificador1 %= 11;

  if(digitoverificador1 == 10)
    digitoverificador1 = 0;
  
  if ((cpf[9] - '0') != digitoverificador1)
    return 0;

  int digitoverificador2 = 0;
  for(int i = 0; i <= 9; i++)
  {
    digitoverificador2 += (cpf[i] - '0')*i;
  }
  digitoverificador2 %= 11;

  if(digitoverificador2 == 10)
    digitoverificador2 = 0;

  if ((cpf[10] - '0') != digitoverificador2)
      return 0;

  return 1;
}
